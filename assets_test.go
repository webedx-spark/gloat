// Code generated by go-bindata.
// sources:
// testdata/migrations/20170329154959_introduce_domain_model/down.sql
// testdata/migrations/20170329154959_introduce_domain_model/up.sql
// testdata/migrations/20170511172647_irreversible_migration_brah/up.sql
// testdata/migrations/20180905150724_concurrent_migration/down.sql
// testdata/migrations/20180905150724_concurrent_migration/options.json
// testdata/migrations/20180905150724_concurrent_migration/up.sql
// testdata/migrations/20180920181906_migration_with_an_error/down.sql
// testdata/migrations/20180920181906_migration_with_an_error/up.sql
// DO NOT EDIT!

package gloat

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testdataMigrations20170329154959_introduce_domain_modelDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xcf\x0c\x8a\x87\x12\x00\x00\x00")

func testdataMigrations20170329154959_introduce_domain_modelDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20170329154959_introduce_domain_modelDownSql,
		"testdata/migrations/20170329154959_introduce_domain_model/down.sql",
	)
}

func testdataMigrations20170329154959_introduce_domain_modelDownSql() (*asset, error) {
	bytes, err := testdataMigrations20170329154959_introduce_domain_modelDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20170329154959_introduce_domain_model/down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataMigrations20170329154959_introduce_domain_modelUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\xb1\xaa\x83\x30\x14\xc6\xf1\xdd\xa7\xf8\xc6\x7b\xe1\xbe\xc1\x9d\x52\x9b\x82\x34\x5a\x49\x8f\x83\x93\x9c\xea\xc1\x06\x8c\x48\x12\x0b\x7d\xfb\x52\x47\x87\x0e\x5d\xbe\xe9\xf7\xf1\xcf\xad\x56\xa4\x41\xea\x60\x34\xd6\x28\x21\xe2\x27\x03\x00\x37\xbc\xf7\xe6\xc6\x28\xc1\xf1\x84\xda\x16\xa5\xb2\x2d\xce\xba\x45\x75\x21\x54\x8d\x31\x7f\x9b\x9c\xd9\x0b\xd0\xdf\x39\x70\x9f\x24\xe0\xc1\xe1\xe9\xe6\x71\xa7\xc4\xb3\x9b\x3e\xaa\x8d\xf5\x41\x38\xc9\xd0\x71\x02\x92\xf3\x12\x13\xfb\x05\x47\x7d\x52\x8d\x21\xe4\x8d\xb5\xba\xa2\x8e\x8a\x52\x5f\x49\x95\xf5\x2e\xb2\x2e\xc3\x57\xef\xec\xf7\x3f\x7b\x05\x00\x00\xff\xff\x18\xf5\xad\xef\x0a\x01\x00\x00")

func testdataMigrations20170329154959_introduce_domain_modelUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20170329154959_introduce_domain_modelUpSql,
		"testdata/migrations/20170329154959_introduce_domain_model/up.sql",
	)
}

func testdataMigrations20170329154959_introduce_domain_modelUpSql() (*asset, error) {
	bytes, err := testdataMigrations20170329154959_introduce_domain_modelUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20170329154959_introduce_domain_model/up.sql", size: 266, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataMigrations20170511172647_irreversible_migration_brahUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x28\xc9\xcf\x4e\xcd\x53\x48\xce\x48\x2c\x4a\x4c\x2e\x49\x2d\x52\x28\x4b\x2c\xaa\xcc\xcc\x4b\xb7\xe6\x02\x04\x00\x00\xff\xff\x24\x88\xbd\x45\x36\x00\x00\x00")

func testdataMigrations20170511172647_irreversible_migration_brahUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20170511172647_irreversible_migration_brahUpSql,
		"testdata/migrations/20170511172647_irreversible_migration_brah/up.sql",
	)
}

func testdataMigrations20170511172647_irreversible_migration_brahUpSql() (*asset, error) {
	bytes, err := testdataMigrations20170511172647_irreversible_migration_brahUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20170511172647_irreversible_migration_brah/up.sql", size: 54, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataMigrations20180905150724_concurrent_migrationDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func testdataMigrations20180905150724_concurrent_migrationDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20180905150724_concurrent_migrationDownSql,
		"testdata/migrations/20180905150724_concurrent_migration/down.sql",
	)
}

func testdataMigrations20180905150724_concurrent_migrationDownSql() (*asset, error) {
	bytes, err := testdataMigrations20180905150724_concurrent_migrationDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20180905150724_concurrent_migration/down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataMigrations20180905150724_concurrent_migrationOptionsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe2\x54\x2a\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x53\xb2\x52\x48\x4b\xcc\x29\x4e\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x0e\x77\x70\x04\x1a\x00\x00\x00")

func testdataMigrations20180905150724_concurrent_migrationOptionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20180905150724_concurrent_migrationOptionsJson,
		"testdata/migrations/20180905150724_concurrent_migration/options.json",
	)
}

func testdataMigrations20180905150724_concurrent_migrationOptionsJson() (*asset, error) {
	bytes, err := testdataMigrations20180905150724_concurrent_migrationOptionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20180905150724_concurrent_migration/options.json", size: 26, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataMigrations20180905150724_concurrent_migrationUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func testdataMigrations20180905150724_concurrent_migrationUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20180905150724_concurrent_migrationUpSql,
		"testdata/migrations/20180905150724_concurrent_migration/up.sql",
	)
}

func testdataMigrations20180905150724_concurrent_migrationUpSql() (*asset, error) {
	bytes, err := testdataMigrations20180905150724_concurrent_migrationUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20180905150724_concurrent_migration/up.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataMigrations20180920181906_migration_with_an_errorDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x51\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\x6b\x44\xa8\xf8\x11\x00\x00\x00")

func testdataMigrations20180920181906_migration_with_an_errorDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20180920181906_migration_with_an_errorDownSql,
		"testdata/migrations/20180920181906_migration_with_an_error/down.sql",
	)
}

func testdataMigrations20180920181906_migration_with_an_errorDownSql() (*asset, error) {
	bytes, err := testdataMigrations20180920181906_migration_with_an_errorDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20180920181906_migration_with_an_error/down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataMigrations20180920181906_migration_with_an_errorUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x51\x28\x2d\x4e\x2d\x2a\x56\xd0\xe0\x52\x50\x50\x50\xc8\x4c\x51\x48\xca\x4c\x2f\x4e\x2d\xca\x4c\xcc\x51\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\x54\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\xe1\xd2\xb4\xe6\xe2\x02\x04\x00\x00\xff\xff\x59\x13\xa0\x89\x3e\x00\x00\x00")

func testdataMigrations20180920181906_migration_with_an_errorUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_testdataMigrations20180920181906_migration_with_an_errorUpSql,
		"testdata/migrations/20180920181906_migration_with_an_error/up.sql",
	)
}

func testdataMigrations20180920181906_migration_with_an_errorUpSql() (*asset, error) {
	bytes, err := testdataMigrations20180920181906_migration_with_an_errorUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/migrations/20180920181906_migration_with_an_error/up.sql", size: 62, mode: os.FileMode(420), modTime: time.Unix(1646038365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testdata/migrations/20170329154959_introduce_domain_model/down.sql": testdataMigrations20170329154959_introduce_domain_modelDownSql,
	"testdata/migrations/20170329154959_introduce_domain_model/up.sql": testdataMigrations20170329154959_introduce_domain_modelUpSql,
	"testdata/migrations/20170511172647_irreversible_migration_brah/up.sql": testdataMigrations20170511172647_irreversible_migration_brahUpSql,
	"testdata/migrations/20180905150724_concurrent_migration/down.sql": testdataMigrations20180905150724_concurrent_migrationDownSql,
	"testdata/migrations/20180905150724_concurrent_migration/options.json": testdataMigrations20180905150724_concurrent_migrationOptionsJson,
	"testdata/migrations/20180905150724_concurrent_migration/up.sql": testdataMigrations20180905150724_concurrent_migrationUpSql,
	"testdata/migrations/20180920181906_migration_with_an_error/down.sql": testdataMigrations20180920181906_migration_with_an_errorDownSql,
	"testdata/migrations/20180920181906_migration_with_an_error/up.sql": testdataMigrations20180920181906_migration_with_an_errorUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"testdata": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"20170329154959_introduce_domain_model": &bintree{nil, map[string]*bintree{
				"down.sql": &bintree{testdataMigrations20170329154959_introduce_domain_modelDownSql, map[string]*bintree{}},
				"up.sql": &bintree{testdataMigrations20170329154959_introduce_domain_modelUpSql, map[string]*bintree{}},
			}},
			"20170511172647_irreversible_migration_brah": &bintree{nil, map[string]*bintree{
				"up.sql": &bintree{testdataMigrations20170511172647_irreversible_migration_brahUpSql, map[string]*bintree{}},
			}},
			"20180905150724_concurrent_migration": &bintree{nil, map[string]*bintree{
				"down.sql": &bintree{testdataMigrations20180905150724_concurrent_migrationDownSql, map[string]*bintree{}},
				"options.json": &bintree{testdataMigrations20180905150724_concurrent_migrationOptionsJson, map[string]*bintree{}},
				"up.sql": &bintree{testdataMigrations20180905150724_concurrent_migrationUpSql, map[string]*bintree{}},
			}},
			"20180920181906_migration_with_an_error": &bintree{nil, map[string]*bintree{
				"down.sql": &bintree{testdataMigrations20180920181906_migration_with_an_errorDownSql, map[string]*bintree{}},
				"up.sql": &bintree{testdataMigrations20180920181906_migration_with_an_errorUpSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

